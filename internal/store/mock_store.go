// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/joeyscat/ok-short/internal/store (interfaces: Factory,LinkStore,LinkTraceStore)

// Package store is a generated GoMock package.
package store

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/joeyscat/ok-short/internal/model"
)

// MockFactory is a mock of Factory interface.
type MockFactory struct {
	ctrl     *gomock.Controller
	recorder *MockFactoryMockRecorder
}

// MockFactoryMockRecorder is the mock recorder for MockFactory.
type MockFactoryMockRecorder struct {
	mock *MockFactory
}

// NewMockFactory creates a new mock instance.
func NewMockFactory(ctrl *gomock.Controller) *MockFactory {
	mock := &MockFactory{ctrl: ctrl}
	mock.recorder = &MockFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFactory) EXPECT() *MockFactoryMockRecorder {
	return m.recorder
}

// LinkTraces mocks base method.
func (m *MockFactory) LinkTraces() LinkTraceStore {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LinkTraces")
	ret0, _ := ret[0].(LinkTraceStore)
	return ret0
}

// LinkTraces indicates an expected call of LinkTraces.
func (mr *MockFactoryMockRecorder) LinkTraces() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LinkTraces", reflect.TypeOf((*MockFactory)(nil).LinkTraces))
}

// Links mocks base method.
func (m *MockFactory) Links() LinkStore {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Links")
	ret0, _ := ret[0].(LinkStore)
	return ret0
}

// Links indicates an expected call of Links.
func (mr *MockFactoryMockRecorder) Links() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Links", reflect.TypeOf((*MockFactory)(nil).Links))
}

// MockLinkStore is a mock of LinkStore interface.
type MockLinkStore struct {
	ctrl     *gomock.Controller
	recorder *MockLinkStoreMockRecorder
}

// MockLinkStoreMockRecorder is the mock recorder for MockLinkStore.
type MockLinkStoreMockRecorder struct {
	mock *MockLinkStore
}

// NewMockLinkStore creates a new mock instance.
func NewMockLinkStore(ctrl *gomock.Controller) *MockLinkStore {
	mock := &MockLinkStore{ctrl: ctrl}
	mock.recorder = &MockLinkStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLinkStore) EXPECT() *MockLinkStoreMockRecorder {
	return m.recorder
}

// CreateLink mocks base method.
func (m *MockLinkStore) CreateLink(arg0 context.Context, arg1 *model.Link) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLink", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateLink indicates an expected call of CreateLink.
func (mr *MockLinkStoreMockRecorder) CreateLink(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLink", reflect.TypeOf((*MockLinkStore)(nil).CreateLink), arg0, arg1)
}

// GetLinkBySc mocks base method.
func (m *MockLinkStore) GetLinkBySc(arg0 context.Context, arg1 string) (*model.Link, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLinkBySc", arg0, arg1)
	ret0, _ := ret[0].(*model.Link)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLinkBySc indicates an expected call of GetLinkBySc.
func (mr *MockLinkStoreMockRecorder) GetLinkBySc(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLinkBySc", reflect.TypeOf((*MockLinkStore)(nil).GetLinkBySc), arg0, arg1)
}

// ListLinks mocks base method.
func (m *MockLinkStore) ListLinks(arg0 context.Context, arg1, arg2 int64) ([]*model.Link, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLinks", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*model.Link)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLinks indicates an expected call of ListLinks.
func (mr *MockLinkStoreMockRecorder) ListLinks(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLinks", reflect.TypeOf((*MockLinkStore)(nil).ListLinks), arg0, arg1, arg2)
}

// MockLinkTraceStore is a mock of LinkTraceStore interface.
type MockLinkTraceStore struct {
	ctrl     *gomock.Controller
	recorder *MockLinkTraceStoreMockRecorder
}

// MockLinkTraceStoreMockRecorder is the mock recorder for MockLinkTraceStore.
type MockLinkTraceStoreMockRecorder struct {
	mock *MockLinkTraceStore
}

// NewMockLinkTraceStore creates a new mock instance.
func NewMockLinkTraceStore(ctrl *gomock.Controller) *MockLinkTraceStore {
	mock := &MockLinkTraceStore{ctrl: ctrl}
	mock.recorder = &MockLinkTraceStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLinkTraceStore) EXPECT() *MockLinkTraceStoreMockRecorder {
	return m.recorder
}

// CreateLinkTrace mocks base method.
func (m *MockLinkTraceStore) CreateLinkTrace(arg0 context.Context, arg1 *model.LinkTrace) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLinkTrace", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateLinkTrace indicates an expected call of CreateLinkTrace.
func (mr *MockLinkTraceStoreMockRecorder) CreateLinkTrace(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLinkTrace", reflect.TypeOf((*MockLinkTraceStore)(nil).CreateLinkTrace), arg0, arg1)
}

// ListLinkTrace mocks base method.
func (m *MockLinkTraceStore) ListLinkTrace(arg0 context.Context, arg1, arg2 int64) ([]*model.LinkTrace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLinkTrace", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*model.LinkTrace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLinkTrace indicates an expected call of ListLinkTrace.
func (mr *MockLinkTraceStoreMockRecorder) ListLinkTrace(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLinkTrace", reflect.TypeOf((*MockLinkTraceStore)(nil).ListLinkTrace), arg0, arg1, arg2)
}

// ListLinkTraceBySc mocks base method.
func (m *MockLinkTraceStore) ListLinkTraceBySc(arg0 context.Context, arg1 string, arg2, arg3 int64) ([]*model.LinkTrace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLinkTraceBySc", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*model.LinkTrace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLinkTraceBySc indicates an expected call of ListLinkTraceBySc.
func (mr *MockLinkTraceStoreMockRecorder) ListLinkTraceBySc(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLinkTraceBySc", reflect.TypeOf((*MockLinkTraceStore)(nil).ListLinkTraceBySc), arg0, arg1, arg2, arg3)
}
